// Copyright (C) 2013-2014 Thalmic Labs Inc.
// Distributed under the Myo SDK license agreement. See LICENSE.txt for details.

// This sample illustrates how to interface with multiple Myo armbands and distinguish between them.

#include <iostream>
#include <stdexcept>
#include <vector>
#define _USE_MATH_DEFINES
#include <cmath>
#include <iostream>
#include <iomanip>
#include <stdexcept>
#include <string>
#include <algorithm>
#include <stdio.h>
#include <string.h>
#include <iostream>       // std::cout, std::endl
#include <thread>         // std::this_thread::sleep_for
#include <chrono>
#include <curl/curl.h>
#include <curl/easy.h>
#include <myo/myo.hpp>

class PrintMyoEvents : public myo::DeviceListener {

    public:
    std::string message="";
    std::string XoldMess="";
    std::string YoldMess="";
    std::string ZoldMess="";
    std::string oldMess="";
    std::string name = "";
    uint64_t oldTimeStamp=0;



    // Every time Myo Connect successfully pairs with a Myo armband, this function will be called.
    //
    // You can rely on the following rules:
    //  - onPair() will only be called once for each Myo device
    //  - no other events will occur involving a given Myo device before onPair() is called with it
    //
    // If you need to do some kind of per-Myo preparation before handling events, you can safely do it in onPair().
    void onPair(myo::Myo* myo, uint64_t timestamp, myo::FirmwareVersion firmwareVersion)
    {
        // Print out the MAC address of the armband we paired with.
        
        // The pointer address we get for a Myo is unique - in other words, it's safe to compare two Myo pointers to
        // see if they're referring to the same Myo.
        
        // Add the Myo pointer to our list of known Myo devices. This list is used to implement identifyMyo() below so
        // that we can give each Myo a nice short identifier.
        knownMyos.push_back(myo);
        
        // Now that we've added it to our list, get our short ID for it and print it out.
        std::cout << "Paired with " << identifyMyo(myo) << "." << std::endl;
    }
    
    void onPose(myo::Myo* myo, uint64_t timestamp, myo::Pose pose)
    {
        std::cout << "Myo " << identifyMyo(myo) << " switched to pose " << pose.toString() << "." << std::endl;
    }
    
    void onConnect(myo::Myo* myo, uint64_t timestamp, myo::FirmwareVersion firmwareVersion)
    {
        std::cout << "Myo " << identifyMyo(myo) << " has connected." << std::endl;
        if(identifyMyo(myo)==2){
            std::cout << "Enter your name\n";
            std::cin >> name;
        }
    }
    
    void onDisconnect(myo::Myo* myo, uint64_t timestamp)
    {
        std::cout << "Myo " << identifyMyo(myo) << " has disconnected." << std::endl;
    }
    
    // This is a utility function implemented for this sample that maps a myo::Myo* to a unique ID starting at 1.
    // It does so by looking for the Myo pointer in knownMyos, which onPair() adds each Myo into as it is paired.
    int identifyMyo(myo::Myo* myo) {
        // Walk through the list of Myo devices that we've seen pairing events for.
        for (int i = 0; i < knownMyos.size(); ++i) {
            // If two Myo pointers compare equal, they refer to the same Myo device.
            if (knownMyos[i] == myo) {
                return i + 1;
            }
        }
        return 0;
    }
    void onGyroscopeData(myo::Myo* myo, uint64_t timestamp, const myo::Vector3<float>& gyro)
    {
        int num = identifyMyo(myo);
        if(num==2){
            num=3;
        }
        else{
            num=0;
        }
        if(gyro.x()>200){
            message =  "x";
            //printf("bobx");
            if(message.compare(oldMess)!=0 && (timestamp - oldTimeStamp)> 500000){
                oldMess = message;
                std::cout << timestamp;
                printf("\n");
                std::cout << oldTimeStamp;
                oldTimeStamp=timestamp;
                num = num+1;
                std::string mess = std::to_string(num);
               // printf("x   \n");
                postRequest(mess, myo); 
                std::this_thread::sleep_for (std::chrono::seconds(2));
            }
        }
        else if(gyro.y()>200){
            message ="y";
            if((message.compare(oldMess))!=0  && (timestamp - oldTimeStamp)> 500000){
                oldMess = message;
                //printf("y    \n ");
                std::cout << timestamp;
                printf("\n");
                std::cout << oldTimeStamp;
                oldTimeStamp=timestamp;
                num = num + 2;
                std::string mess = std::to_string(num);
                postRequest(mess, myo); 
                std::this_thread::sleep_for (std::chrono::seconds(2));
            }    
        }
        else if(gyro.z()>200){
            message =  "z";
            if((message.compare(oldMess))!=0 && (timestamp - oldTimeStamp)> 500000){
                oldMess = message;
                std::cout << timestamp;
                printf("\n");
                std::cout << oldTimeStamp;
                oldTimeStamp=timestamp;
              //  printf("z     \n");
                num = num +3;
                std::string mess = std::to_string(num);
                postRequest(mess, myo);  
                std::this_thread::sleep_for (std::chrono::seconds(2));
            }
        }
        else;
    }
    void postRequest( std::string mess, myo::Myo* myo){
   
        std::string message= "";
        message = message + "name=" + name;//myo.getarm();
        std::cout<< name;
       // printf("%s", message);
        int num = identifyMyo(myo);
        std::string s = std::to_string(num);
        
        
        
       // message = message + s;
        message = message + "&action=";
        message = message + mess;
        CURL *curl;
        CURLcode res;
        curl_global_init(CURL_GLOBAL_ALL);
        
       // std::string bob= "user=LOLZCAT&action=";
        //bob = bob + message;
        char *cstr = new char[message.length() + 1];
       strcpy(cstr, message.c_str());
        
        /* get a curl handle */
        curl = curl_easy_init();
        if(curl) {
            curl_easy_setopt(curl, CURLOPT_URL, "http://45.79.148.237:9000/postMyo");
            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, cstr);
            
            res = curl_easy_perform(curl);

            if(res != CURLE_OK)
            fprintf(stderr, "curl_easy_perform() failed: %s\n",
                    curl_easy_strerror(res));
            curl_easy_cleanup(curl);
        }
        curl_global_cleanup();    
 }
    
    // We store each Myo pointer that we pair with in this list, so that we can keep track of the order we've seen
    // each Myo and give it a unique short identifier (see onPair() and identifyMyo() above).
    std::vector<myo::Myo*> knownMyos;
};

int main(int argc, char** argv)
{
       
        
   
    
    
    
    try {
        myo::Hub hub("com.example.multiple-myos");
        
        // Instantiate the PrintMyoEvents class we defined above, and attach it as a listener to our Hub.
        PrintMyoEvents printer;
        hub.addListener(&printer);
       
        while (1) {
         //    Process events for 10 milliseconds at a time.
            hub.runOnce(10);
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        std::cerr << "Press enter to continue.";
        std::cin.ignore();
        return 1;
    }
}
